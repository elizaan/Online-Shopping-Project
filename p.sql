-- FUNCTION: public."ADMIN_LOGIN"(integer, text, integer)-- DROP FUNCTION public."ADMIN_LOGIN"(integer, text, integer);CREATE OR REPLACE FUNCTION public."ADMIN_LOGIN"(	aid integer,	"Name" text,	gid integer)    RETURNS integer    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$DECLARE    checkpass integer;BEGINcheckpass = 0;IF EXISTS(select 1from public."ADMIN"where "Admin_Name" = "Name" and "Admin_Id" = "aid" and "Group_Id" = "gid")THENcheckpass = aid;END IF;return checkpass; END;$BODY$;--ALTER FUNCTION public."ADMIN_LOGIN"(integer, text, integer);   -- FUNCTION: public."Add_Cart"(integer, text, text, integer)-- DROP FUNCTION public."Add_Cart"(integer, text, text, integer);CREATE OR REPLACE FUNCTION public."Add_Cart"(	pid integer,	"user" text,	pass text,	quant integer)    RETURNS integer    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$declare	new_id integer;	new_pid integer;	new_cust_id integer;	q integer;	t_p integer;	s_i integer;		x integer;	BEGIN    q = 0;if exists(select quantity 	from public."PRODUCT"	WHERE "Product_Id" = pid and "quantity" = 0)then RAISE NOTICE 'the ITEM IS OUT OF STOCK!';ELSE	select max("Order_Id") into new_id	FROM public."ORDER";	new_id = new_id +1;IF EXISTS(select 1from public."CUSTOMER"where "Name" = "user" and "Password" = "pass")THEN	select "Customer_Id" into new_cust_id from public."CUSTOMER" where "Name" = "user" and "Password" = "pass";END IF;	SELECT random()*(1005-1001)+1001 into s_i;	q = q+quant;	x = (SELECT "quantity"		from public."PRODUCT"		WHERE "Product_Id" = pid );	IF(x<q)	then q=x;	else	q = q;	end if;	SELECT "Price" into t_p from public."PRODUCT" where "Product_Id" = pid;	t_p = q*t_p;	INSERT INTO public."ORDER"("Order_Id","Customer_Id", "Quantity", "Total_Price", "Staff_Id")	VALUES(new_id, new_cust_id, q, t_p, s_i);		Insert into public."OrderProducts"("Product_Id","Order_Id","Quantity")values(pid,new_id,q);END IF;		RETURN t_p;END;$BODY$;--ALTER FUNCTION public."Add_Cart"(integer, text, text, integer);  -- FUNCTION: public."LOG_IN"(text, text)-- DROP FUNCTION public."LOG_IN"(text, text);CREATE OR REPLACE FUNCTION public."LOG_IN"(	username text,	pass text)    RETURNS integer    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$DECLARE    checkpass integer;   PD text; 	 cid integer;	 R record;BEGINcheckpass = 0;IF EXISTS(select 1from public."CUSTOMER"where "Name" = "username" and "Password" = "pass")THEN	select "Customer_Id" into cid from public."CUSTOMER" where "Name" = "username" and "Password" = "pass";checkpass = 1;END IF;return checkpass; END;$BODY$;--ALTER FUNCTION public."LOG_IN"(text, text);-- FUNCTION: public."Message_Asce"(text, text, integer, text)-- DROP FUNCTION public."Message_Asce"(text, text, integer, text);CREATE OR REPLACE FUNCTION public."Message_Asce"(	usnam text,	pass text,	gid integer,	msz text)    RETURNS void    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$declare	cust_id integer;		BEGINselect "Customer_Id" into cust_idfrom public."CUSTOMER"where "Name" = usnam AND "Password" = pass;INSERT INTO public."MESSAGE"("Group_Id", "Customer_Id", "Message")VALUES(gid, cust_id, msz);END;$BODY$;--ALTER FUNCTION public."Message_Asce"(text, text, integer, text);-- FUNCTION: public."NEW_PROD_INS"(text, integer, date, date, integer, text)-- DROP FUNCTION public."NEW_PROD_INS"(text, integer, date, date, integer, text);CREATE OR REPLACE FUNCTION public."NEW_PROD_INS"(	nam text,	pr integer,	prod_dat date,	exp_dat date,	q integer,	cat text)    RETURNS void    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$DECLAREpid integer;BEGINSELECT MAX("Product_Id") into pidFROM public."PRODUCT";pid = pid + 1;INSERT INTO public."PRODUCT"("Product_Id", "Name", "Price", "Production_Date", "Expire_Date", "In_Stock", "quantity", "Category")VALUES(pid, nam, pr, prod_dat, exp_dat, true, q, cat);END;$BODY$;--ALTER FUNCTION public."NEW_PROD_INS"(text, integer, date, date, integer, text);-- FUNCTION: public."PAYMENT_UPDATE"(integer, text, text)-- DROP FUNCTION public."PAYMENT_UPDATE"(integer, text, text);CREATE OR REPLACE FUNCTION public."PAYMENT_UPDATE"(	oid integer,	usnam text,	pass text)    RETURNS integer    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$declare	PAY_id integer;	cust_id integer;	am  integer;		BEGIN    select "Customer_Id" into cust_id    from public."CUSTOMER"    where "Name" = usnam AND "Password" = pass;		select max("Payment_Id") into PAY_id	FROM public."PAYMENT";	PAY_id = PAY_id +1;	SELECT "Total_Price" into am	FROM PUBLIC."ORDER"	WHERE "Order_Id" = oid;	am = am+60;    	INSERT INTO public."PAYMENT"("Payment_Id", "Order_Id", "Amount", "Delivery_Date", "Customer_Id")  VALUES(PAY_id,oid, am,current_date+3,cust_id); 	return am;END;$BODY$;--ALTER FUNCTION public."PAYMENT_UPDATE"(integer, text, text);-- FUNCTION: public."PROD_CHANGE"(text, text, integer)-- DROP FUNCTION public."PROD_CHANGE"(text, text, integer);CREATE OR REPLACE FUNCTION public."PROD_CHANGE"(	nam text,	cat text,	quan integer)    RETURNS boolean    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$DECLAREcheckopt boolean;q integer;BEGINq= (SELECT "quantity"  FROM public."PRODUCT" WHERE "Name" = "nam" and "Category" = "cat" );IF EXISTS(SELECT "Name", "Category" FROM public."PRODUCT" WHERE "Name" = "nam" and "Category" = "cat")THEN        q= (SELECT "quantity"       FROM public."PRODUCT"       WHERE "Name" = "nam" and "Category" = "cat" );         checkopt = true;		UPDATE public."PRODUCT"		SET "quantity" = "quantity" + quan		WHERE "Name" = "nam" and "Category" = "cat";		if(q=0)		then		update public."PRODUCT"		SET "In_Stock" = true		WHERE "Name" = "nam" and "Category" = "cat";		end if;				ELSE	checkopt = false;END IF;RETURN checkopt;END;		  		  		  		  		  		  		  		  		  		  		  $BODY$;--ALTER FUNCTION public."PROD_CHANGE"(text, text, integer);-- FUNCTION: public."PROD_DEL_ADMIN"(integer)-- DROP FUNCTION public."PROD_DEL_ADMIN"(integer);CREATE OR REPLACE FUNCTION public."PROD_DEL_ADMIN"(	pid integer)    RETURNS boolean    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$DECLAREcheckopt boolean;BEGINIF EXISTS(SELECT "Product_Id" FROM public."PRODUCT" WHERE "Product_Id" = "pid")THEN	checkopt = true;		DELETE FROM public."PRODUCT"		WHERE "Product_Id" = "pid";ELSE	checkopt = false;END IF;RETURN checkopt;END;		  		  		  $BODY$;--ALTER FUNCTION public."PROD_DEL_ADMIN"(integer);-- FUNCTION: public."PROD_REMOVEbyADMIN"(integer)-- DROP FUNCTION public."PROD_REMOVEbyADMIN"(integer);CREATE OR REPLACE FUNCTION public."PROD_REMOVEbyADMIN"(	pid integer)    RETURNS boolean    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$DECLAREcheckopt boolean;BEGINIF EXISTS(SELECT "Product_Id" FROM public."PRODUCT" WHERE "Product_Id" = "pid")THEN	        checkopt = true;		UPDATE public."PRODUCT"		SET "quantity" = 0		WHERE "Product_Id" = "pid";				UPDATE public."PRODUCT"		SET "In_Stock" = false 		WHERE "Product_Id" = "pid";				UPDATE public."PRODUCT"		SET "Price" =0 		WHERE "Product_Id" = "pid";						UPDATE public."PRODUCT"		SET "Production_Date"=null		WHERE "Product_Id" = "pid";						UPDATE public."PRODUCT"		SET "Expire_Date"= null		WHERE "Product_Id" = "pid";--END IF;--IF EXISTS--(SELECT "Product_Id" --FROM public."PRODUCT" --WHERE "Product_Id" = "pid")--THEN	checkopt = true;		--UPDATE public."PRODUCT"		--SET "Price" = 0 		--WHERE "Product_Id" = "pid";ELSE	checkopt = false;END IF;RETURN checkopt;END;		  		  		  $BODY$;--ALTER FUNCTION public."PROD_REMOVEbyADMIN"(integer);-- FUNCTION: public."REVIEW_FUNC"(integer, integer, text, text, text)-- DROP FUNCTION public."REVIEW_FUNC"(integer, integer, text, text, text);CREATE OR REPLACE FUNCTION public."REVIEW_FUNC"(	grp integer,	pid integer,	cmnt text,	"user" text,	pass text)    RETURNS text    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$declare	cust_id integer;	BEGINIF EXISTS(select 1from public."CUSTOMER"where "Name" = "user" and "Password" = "pass")THEN	select "Customer_Id" into cust_id from public."CUSTOMER" where "Name" = "user" and "Password" = "pass";END IF;	INSERT INTO public."REVIEW"("Group_Id","Customer_Id", "Product_Id", "Comment")	VALUES(grp, cust_id, pid, cmnt);	RETURN cmnt;END;$BODY$;--ALTER FUNCTION public."REVIEW_FUNC"(integer, integer, text, text, text);-- FUNCTION: public."SIGN_UP"(text, text, integer, text, text)-- DROP FUNCTION public."SIGN_UP"(text, text, integer, text, text);CREATE OR REPLACE FUNCTION public."SIGN_UP"(	nam text,	adds text,	phone integer,	mail text,	pass text)    RETURNS integer    LANGUAGE 'plpgsql'    COST 100    VOLATILE AS $BODY$DECLARE	checkpass integer;	R record;	cid integer;   	BEGIN--checkpass = 0;IF EXISTS(select 1from public."CUSTOMER"where "Name" = "nam" and "Password" = "pass")THEN	checkpass = 0;ELSE	SELECT MAX("Customer_Id") into cid  FROM public."CUSTOMER";		cid = cid + 1;		INSERT INTO public."CUSTOMER"("Customer_Id", "Name", "Address", "Phone_Number", "Email", "Password")	VALUES(cid, nam, adds, phone, mail, pass);	checkpass = 1;END IF;RETURN checkpass;END;$BODY$;--ALTER FUNCTION public."SIGN_UP"(text, text, integer, text, text);-- FUNCTION: public."UPDATE_INSTOCK"()-- DROP FUNCTION public."UPDATE_INSTOCK"();CREATE FUNCTION public."UPDATE_INSTOCK"()    RETURNS trigger    LANGUAGE 'plpgsql'    COST 100    VOLATILE NOT LEAKPROOFAS $BODY$declareq integer;beginq = new."quantity";IF EXISTS(SELECT 1		 FROM public."PRODUCT"		 WHERE q =0)then    UPDATE public."PRODUCT"   SET "In_Stock" = false   WHERE q=0;end if;return new;end;		 $BODY$;--ALTER FUNCTION public."UPDATE_INSTOCK"();-- FUNCTION: public.cartbuytrigg()-- DROP FUNCTION public.cartbuytrigg();CREATE FUNCTION public.cartbuytrigg()    RETURNS trigger    LANGUAGE 'plpgsql'    COST 100    VOLATILE NOT LEAKPROOFAS $BODY$declare	AMOUNT integer;    prod integer; 	q integer;	nq integer;BEGIN   prod = NEW."Product_Id";   nq   = NEW."Quantity";   q = (select quantity	FROM public."PRODUCT"   WHERE "Product_Id" = prod);   IF (q <> 0 )	THEN				q=q-nq;			    UPDATE public."PRODUCT"				  SET quantity = q 			    WHERE "Product_Id" = prod;				IF(q = 0)				THEN				UPDATE public."PRODUCT"				SET "In_Stock" = false				WHERE "Product_Id" = prod;				END IF;								   END IF;  -- IF EXISTS(select In_Stock	--FROM public."PRODUCT" -- WHERE "Product_Id" = prod AND	quantity = 0  AND In_Stock = true)	--THEN			   -- UPDATE public."PRODUCT"				 -- SET In_Stock = false			    --WHERE "Product_Id" = prod;								   --END IF;        RETURN NEW;	END;--$AMOUNT$ LANGUAGE plpgsql;$BODY$;--ALTER FUNCTION public.cartbuytrigg();    -- Table: public."ADMIN"-- DROP TABLE public."ADMIN";CREATE TABLE public."ADMIN"(    "Admin_Id" integer NOT NULL,    "Group_Id" integer NOT NULL,    "Admin_Name" text COLLATE pg_catalog."default" NOT NULL,    CONSTRAINT "ADMIN_pkey" PRIMARY KEY ("Admin_Id"),    CONSTRAINT "ADMIN_Group_Id_fkey" FOREIGN KEY ("Group_Id")        REFERENCES public."GROUP" ("Group_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."ADMIN";INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150501, 12, 'Misha');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150502, 22, 'Rayna');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150503, 32, 'Cyan');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150504, 42, 'Kabir');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150505, 52, 'Eliza');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150506, 42, 'Kazi');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150507, 13, 'Hisham');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150508, 43, 'Ana');INSERT INTO public."ADMIN"(	"Admin_Id", "Group_Id", "Admin_Name")	VALUES (150509, 13, 'Efaz');-- Table: public."CUSTOMER"-- DROP TABLE public."CUSTOMER";CREATE TABLE public."CUSTOMER"(    "Customer_Id" integer NOT NULL,    "Name" text COLLATE pg_catalog."default" NOT NULL,    "Address" text COLLATE pg_catalog."default" NOT NULL,    "Phone_Number" integer NOT NULL,    "Email" text COLLATE pg_catalog."default",    "Password" text COLLATE pg_catalog."default" NOT NULL,    CONSTRAINT "CUSTOMER_pkey" PRIMARY KEY ("Customer_Id"))WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."CUSTOMER";-- Table: public."Consists_Of"-- DROP TABLE public."Consists_Of";CREATE TABLE public."Consists_Of"(    "Customer_Id" integer NOT NULL,    "Group_Id" integer NOT NULL,    CONSTRAINT "Consists_Of_pkey" PRIMARY KEY ("Customer_Id", "Group_Id"),    CONSTRAINT "Consists_Of_Customer_Id_fkey" FOREIGN KEY ("Customer_Id")        REFERENCES public."CUSTOMER" ("Customer_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION,    CONSTRAINT "Consists_Of_Group_Id_fkey" FOREIGN KEY ("Group_Id")        REFERENCES public."GROUP" ("Group_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."Consists_Of";-- Table: public."GROUP"-- DROP TABLE public."GROUP";CREATE TABLE public."GROUP"(    "Group_Id" integer NOT NULL,    "Category" text COLLATE pg_catalog."default" NOT NULL,    CONSTRAINT "GROUP_pkey" PRIMARY KEY ("Group_Id"))WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."GROUP";-- Table: public."MESSAGE"-- DROP TABLE public."MESSAGE";CREATE TABLE public."MESSAGE"(    "Group_Id" integer NOT NULL,    "Customer_Id" integer NOT NULL,    "Message" text COLLATE pg_catalog."default" NOT NULL,    CONSTRAINT "MESSAGE_pkey" PRIMARY KEY ("Group_Id", "Message"),    CONSTRAINT "MESSAGE_Customer_Id_fkey" FOREIGN KEY ("Customer_Id")        REFERENCES public."CUSTOMER" ("Customer_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION,    CONSTRAINT "MESSAGE_Group_Id_fkey" FOREIGN KEY ("Group_Id")        REFERENCES public."GROUP" ("Group_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."MESSAGE";-- Table: public."ORDER"-- DROP TABLE public."ORDER";CREATE TABLE public."ORDER"(    "Order_Id" integer NOT NULL,    "Customer_Id" integer NOT NULL,    "Quantity" integer NOT NULL,    "Total_Price" integer NOT NULL,    "Staff_Id" integer NOT NULL,    CONSTRAINT "ORDER_pkey" PRIMARY KEY ("Order_Id"),    CONSTRAINT "ORDER_Customer_Id_fkey" FOREIGN KEY ("Customer_Id")        REFERENCES public."CUSTOMER" ("Customer_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION,    CONSTRAINT "ORDER_Staff_Id_fkey" FOREIGN KEY ("Staff_Id")        REFERENCES public."STAFF" ("Staff_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."ORDER";CREATE TABLE public."OrderProducts"(    "Product_Id" integer NOT NULL,    "Order_Id" integer NOT NULL,    "Quantity" integer NOT NULL,    CONSTRAINT "OrderProducts_pkey" PRIMARY KEY ("Product_Id", "Order_Id"),    CONSTRAINT "OrderProducts_Order_Id_fkey" FOREIGN KEY ("Order_Id")        REFERENCES public."ORDER" ("Order_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION,    CONSTRAINT "OrderProducts_Product_Id_fkey" FOREIGN KEY ("Product_Id")        REFERENCES public."PRODUCT" ("Product_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."OrderProducts";-- Trigger: CART_BUY2-- DROP TRIGGER "CART_BUY2" ON public."OrderProducts";CREATE TRIGGER "CART_BUY2"    AFTER INSERT    ON public."OrderProducts"    FOR EACH ROW    EXECUTE PROCEDURE public.cartbuytrigg();-- Table: public."PAYMENT"-- DROP TABLE public."PAYMENT";CREATE TABLE public."PAYMENT"(    "Payment_Id" integer NOT NULL,    "Order_Id" integer NOT NULL,    "Amount" integer NOT NULL,    "Delivery_Date" date NOT NULL,    "Customer_Id" integer NOT NULL,    CONSTRAINT "PAYMENT_pkey" PRIMARY KEY ("Payment_Id"),    CONSTRAINT "PAYMENT_Customer_Id_fkey" FOREIGN KEY ("Customer_Id")        REFERENCES public."CUSTOMER" ("Customer_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION,    CONSTRAINT "PAYMENT_Order_Id_fkey" FOREIGN KEY ("Order_Id")        REFERENCES public."ORDER" ("Order_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."PAYMENT";-- Table: public."PRODUCT"-- DROP TABLE public."PRODUCT";CREATE TABLE public."PRODUCT"(    "Product_Id" integer NOT NULL,    "Name" text COLLATE pg_catalog."default" NOT NULL,    "Price" integer NOT NULL,    "Production_Date" date,    "Expire_Date" date,    "In_Stock" boolean NOT NULL,    quantity integer,    "Category" text COLLATE pg_catalog."default",    CONSTRAINT "PRODUCT_pkey" PRIMARY KEY ("Product_Id"),    CONSTRAINT "PRODUCT_Product_Id_key" UNIQUE ("Product_Id"))WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."PRODUCT";-- Table: public."REVIEW"-- DROP TABLE public."REVIEW";CREATE TABLE public."REVIEW"(    "Group_Id" integer NOT NULL,    "Customer_Id" integer NOT NULL,    "Product_Id" integer NOT NULL,    "Comment" text COLLATE pg_catalog."default" NOT NULL,    CONSTRAINT "REVIEW_Customer_Id_fkey" FOREIGN KEY ("Customer_Id")        REFERENCES public."CUSTOMER" ("Customer_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION,    CONSTRAINT "REVIEW_Group_Id_fkey" FOREIGN KEY ("Group_Id")        REFERENCES public."GROUP" ("Group_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION,    CONSTRAINT "REVIEW_Product_Id_fkey" FOREIGN KEY ("Product_Id")        REFERENCES public."PRODUCT" ("Product_Id") MATCH SIMPLE        ON UPDATE NO ACTION        ON DELETE NO ACTION)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."REVIEW";-- Table: public."STAFF"-- DROP TABLE public."STAFF";CREATE TABLE public."STAFF"(    "Staff_Id" integer NOT NULL,    "Staff_Name" text COLLATE pg_catalog."default" NOT NULL,    "Phone_number" integer NOT NULL,    CONSTRAINT "STAFF_pkey" PRIMARY KEY ("Staff_Id"))WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public."STAFF";-- Table: public.order_id-- DROP TABLE public.order_id;CREATE TABLE public.order_id(    max integer)WITH (    OIDS = FALSE)TABLESPACE pg_default;--ALTER TABLE public.order_id;